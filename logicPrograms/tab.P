
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Header
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

:- consult(runner).

:- dynamic rule_r/5 as incremental.
:- dynamic not_rule_r/5 as incremental.
:- dynamic make_not/4 as incremental.
:- dynamic not_make_not/4 as incremental.
:- dynamic make/4 as incremental.
:- dynamic not_make/4 as incremental.
:- dynamic killCivilian/3 as incremental.
:- dynamic not_killCivilian/3 as incremental.
:- dynamic endWar/3 as incremental.
:- dynamic not_endWar/3 as incremental.
:- dynamic bombMilitary/3 as incremental.
:- dynamic not_bombMilitary/3 as incremental.
:- dynamic tacticalBombing/3 as incremental.
:- dynamic not_tacticalBombing/3 as incremental.

:- table killCivilian_ab/2 as incremental.
:- table endWar_ab/2 as incremental.
:- table bombMilitary_ab/2 as incremental.

initProgram :-
    markingAbducibles,
    markingCompls,
    markingTimeOfInterest.

markingAbducibles :-
    markAbducible(tacticalBombing / 0),
    true.

markingCompls :-
    markCompl(tacticalBombing, not_tacticalBombing),
    markCompl(killCivilian, not_killCivilian),
    markCompl(make(X_1), not_make(X_1)),
    markCompl(endWar, not_endWar),
    markCompl(bombMilitary, not_bombMilitary),
    markCompl(make_not(X_1), not_make_not(X_1)),
    markCompl(false, not_false),
    markCompl(rule_r(killCivilian, [make(killCivilian)]), not_rule_r(killCivilian, [make(killCivilian)])),
    markCompl(rule_r(endWar, [bombMilitary]), not_rule_r(endWar, [bombMilitary])),
    markCompl(rule_r(bombMilitary, [tacticalBombing]), not_rule_r(bombMilitary, [tacticalBombing])),
    markCompl(rule_r(killCivilian, [tacticalBombing,not make_not(killCivilian)]), not_rule_r(killCivilian, [tacticalBombing,not make_not(killCivilian)])),
    true.

markingTimeOfInterest :-
    markTimeOfInterest(killCivilian, 0),
    markTimeOfInterest(killCivilian, 1),
    markTimeOfInterest(make, 0),
    markTimeOfInterest(make, 1),
    markTimeOfInterest(endWar, 0),
    markTimeOfInterest(endWar, 1),
    markTimeOfInterest(bombMilitary, 0),
    markTimeOfInterest(bombMilitary, 1),
    markTimeOfInterest(make_not, 0),
    markTimeOfInterest(make_not, 1),
    markTimeOfInterest(false, 0),
    markTimeOfInterest(false, 1),
    true.

query([], I, O, [], Qt) :-
    !,
    holds(not_false, I, O, _, Qt).

query([not F | Fs], I, O, [NotF : T_NotF | Ts], Qt) :-
    !,
    compl(F, NotF),
    holds(NotF, I, E, T_NotF, Qt),
    query(Fs, E, O, Ts, Qt).

query([F | Fs], I, O, [F : T_F | Ts], Qt) :-
    !,
    holds(F, I, E, T_F, Qt),
    query(Fs, E, O, Ts, Qt).

query(not F, I, O, T_F, Qt) :-
    !,
    compl(F, NotF),
    holds(NotF, I, E, T_F, Qt),
    holds(not_false, E, O, _, Qt).

query(F, I, O, T_F, Qt) :-
    holds(F, I, E, T_F, Qt),
    holds(not_false, E, O, _, Qt).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Transformation : Initial Transformation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

rule_r(killCivilian, [make(killCivilian)], I, I, 1).
not_rule_r(killCivilian, [make(killCivilian)], I, I, 0).
rule_r(endWar, [bombMilitary], I, I, 1).
not_rule_r(endWar, [bombMilitary], I, I, 0).
rule_r(bombMilitary, [tacticalBombing], I, I, 1).
not_rule_r(bombMilitary, [tacticalBombing], I, I, 0).
rule_r(killCivilian, [tacticalBombing,not make_not(killCivilian)], I, I, 1).
not_rule_r(killCivilian, [tacticalBombing,not make_not(killCivilian)], I, I, 0).
false(I, I, 0).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Transformation : Apostrophe
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

killCivilian_ab(E_2, T) :-
    active(rule_r(killCivilian, [make(killCivilian)]), T_rule),
    E_1 = [],
    make(killCivilian, E_1, E_2, T_make),
    latest([(rule_r(killCivilian, [make(killCivilian)]), [], E_1, T_rule), (make(killCivilian), E_1, E_2, T_make)], T).

endWar_ab(E_2, T) :-
    active(rule_r(endWar, [bombMilitary]), T_rule),
    E_1 = [],
    bombMilitary(E_1, E_2, T_bombMilitary),
    latest([(rule_r(endWar, [bombMilitary]), [], E_1, T_rule), (bombMilitary, E_1, E_2, T_bombMilitary)], T).

bombMilitary_ab(E_2, T) :-
    active(rule_r(bombMilitary, [tacticalBombing]), T_rule),
    E_1 = [],
    tacticalBombing(E_1, E_2, T_tacticalBombing),
    latest([(rule_r(bombMilitary, [tacticalBombing]), [], E_1, T_rule), (tacticalBombing, E_1, E_2, T_tacticalBombing)], T).

killCivilian_ab(E_3, T) :-
    active(rule_r(killCivilian, [tacticalBombing,not make_not(killCivilian)]), T_rule),
    E_1 = [],
    tacticalBombing(E_1, E_2, T_tacticalBombing),
    not_make_not(killCivilian, E_2, E_3, T_not_make_not),
    latest([(rule_r(killCivilian, [tacticalBombing,not make_not(killCivilian)]), [], E_1, T_rule), (tacticalBombing, E_1, E_2, T_tacticalBombing), (not_make_not(killCivilian), E_2, E_3, T_not_make_not)], T).

make_ab(_h868, E_1, T) :-
    fail.

make_not_ab(_h868, E_1, T) :-
    fail.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Transformation : Plus
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

killCivilian(I, O, T) :- killCivilian_ab(E, T), produce_context(O, I, E).
endWar(I, O, T) :- endWar_ab(E, T), produce_context(O, I, E).
bombMilitary(I, O, T) :- bombMilitary_ab(E, T), produce_context(O, I, E).
make(X_1, I, O, T) :- make_ab(X_1, E, T), produce_context(O, I, E).
make_not(X_1, I, O, T) :- make_not_ab(X_1, E, T), produce_context(O, I, E).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Transformation : Minus & Asterisk
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% not_killCivilian

not_killCivilian(E_0, E_2, T) :-
    killCivilian_star_1(E_0, E_1, D_1),
    killCivilian_star_2(E_1, E_2, D_2),
    joiningLists([D_1, D_2], D),
    latest(D, T).

killCivilian_star_1(I, O, [(not_rule_r(killCivilian, [make(killCivilian)]), I, O, T)]) :-
    not_rule_r(killCivilian, [make(killCivilian)], I, O, T),
    T > 0.
killCivilian_star_1(I, O, D) :-
    D = [(rule_r(killCivilian, [make(killCivilian)]), I, E_0, T_rule_r), (not_make(killCivilian), E_0, O, T_not_make)],
    rule_r(killCivilian, [make(killCivilian)], I, E_0, T_rule_r),
    not_make(killCivilian, E_0, O, T_not_make).

killCivilian_star_2(I, O, [(not_rule_r(killCivilian, [tacticalBombing,not make_not(killCivilian)]), I, O, T)]) :-
    not_rule_r(killCivilian, [tacticalBombing,not make_not(killCivilian)], I, O, T),
    T > 0.
killCivilian_star_2(I, O, D) :-
    D = [(rule_r(killCivilian, [tacticalBombing,not make_not(killCivilian)]), I, E_0, T_rule_r), (not_tacticalBombing, E_0, O, T_not_tacticalBombing)],
    rule_r(killCivilian, [tacticalBombing,not make_not(killCivilian)], I, E_0, T_rule_r),
    not_tacticalBombing(E_0, O, T_not_tacticalBombing).
killCivilian_star_2(I, O, D) :-
    D = [(rule_r(killCivilian, [tacticalBombing,not make_not(killCivilian)]), I, E_0, T_rule_r), (tacticalBombing, E_0, E_1, T_tacticalBombing), (make_not(killCivilian), E_1, O, T_make_not)],
    rule_r(killCivilian, [tacticalBombing,not make_not(killCivilian)], I, E_0, T_rule_r),
    tacticalBombing(E_0, E_1, T_tacticalBombing),
    make_not(killCivilian, E_1, O, T_make_not).

%%% not_make

make(X_1, I, I, 0).
not_make(X_1, I, I, 1).

%%% not_endWar

not_endWar(E_0, E_1, T) :-
    endWar_star_1(E_0, E_1, D_1),
    joiningLists([D_1], D),
    latest(D, T).

endWar_star_1(I, O, [(not_rule_r(endWar, [bombMilitary]), I, O, T)]) :-
    not_rule_r(endWar, [bombMilitary], I, O, T),
    T > 0.
endWar_star_1(I, O, D) :-
    D = [(rule_r(endWar, [bombMilitary]), I, E_0, T_rule_r), (not_bombMilitary, E_0, O, T_not_bombMilitary)],
    rule_r(endWar, [bombMilitary], I, E_0, T_rule_r),
    not_bombMilitary(E_0, O, T_not_bombMilitary).

%%% not_bombMilitary

not_bombMilitary(E_0, E_1, T) :-
    bombMilitary_star_1(E_0, E_1, D_1),
    joiningLists([D_1], D),
    latest(D, T).

bombMilitary_star_1(I, O, [(not_rule_r(bombMilitary, [tacticalBombing]), I, O, T)]) :-
    not_rule_r(bombMilitary, [tacticalBombing], I, O, T),
    T > 0.
bombMilitary_star_1(I, O, D) :-
    D = [(rule_r(bombMilitary, [tacticalBombing]), I, E_0, T_rule_r), (not_tacticalBombing, E_0, O, T_not_tacticalBombing)],
    rule_r(bombMilitary, [tacticalBombing], I, E_0, T_rule_r),
    not_tacticalBombing(E_0, O, T_not_tacticalBombing).

%%% not_make_not

make_not(X_1, I, I, 0).
not_make_not(X_1, I, I, 1).

%%% not_false

false(I, I, 0).
not_false(I, I, 1).

%%% not_make

make(X_1, I, I, 0).
not_make(X_1, I, I, 1).

%%% not_make_not

make_not(X_1, I, I, 0).
not_make_not(X_1, I, I, 1).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Transformation : O
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

tacticalBombing(I, O, T) :- insert_abducible(tacticalBombing, I, O, T).
not_tacticalBombing(I, O, T) :- insert_abducible(not tacticalBombing, I, O, T).

